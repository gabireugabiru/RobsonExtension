{
    "add": {
        "prefix": [
            "add"
        ],
        "body": [
            "robson",
            "comeu 0",
            "comeu ${1:0}",
            "comeu ${2:0}"
        ],
        "description": "adds param2 to param3 and push to stack"
    },
    "sub": {
        "prefix": "sub",
        "body": [
            "robson",
            "comeu 1",
            "comeu ${1:0}",
            "comeu ${2:0}"
        ],
        "description": "substracts param3 of param2 and push to stack"
    },
    "mul": {
        "prefix": "mul",
        "body": [
            "robson",
            "comeu 2",
            "comeu ${1:0}",
            "comeu ${2:0}"
        ],
        "description": "multiplies param3 and param2 and push to stack"
    },
    "div": {
        "prefix": "div",
        "body": [
            "robson",
            "comeu 3",
            "comeu ${1:0}",
            "comeu ${2:0}"
        ],
        "description": "dividies param2 of param3 and push to stack"
    },
    "if_lower": {
        "prefix": [
            "if_lower"
        ],
        "body": [
            "robson robson",
            "comeu ${1:0}",
            "comeu ${2:0}",
            "lambeu ${3::}"
        ],
        "description": "if param1 < param2 then it jumps to param3"
    },
    "push": {
        "prefix": "push",
        "body": [
            "robson robson robson",
            "comeu ${1:0}"
        ],
        "description": "pushes the param1 to stack"
    },
    "if": {
        "prefix": "if",
        "body": [
            "robson robson robson robson",
            "comeu ${1:0}",
            "comeu ${2:0}",
            "lambeu ${3::}"
        ],
        "description": "if param1 == param2 then it jumps to param3"
    },
    "verify_stack": {
        "prefix": "vstack",
        "body": [
            "robson robson robson robson robson",
            "lambeu ${1::}"
        ],
        "description": "if stack is empty jump to param1"
    },
    "input": {
        "prefix": "input",
        "body": [
            "robson robson robson robson robson robson",
            "comeu ${1:0}",
            "comeu ${2:0}",
            "comeu ${3:0}"
        ],
        "description": "get the input of the user and sets it to address param1, if param2 is 1 it counts as integer, if is 2 is an signed integer if 3 is float, otherwise is string, param3 is the limit"
    },
    "print": {
        "prefix": "print",
        "body": "robson robson robson robson robson robson robson",
        "description": "prints the top of the stack as ascii"
    },
    "print_number": {
        "prefix": [
            "pnumber"
        ],
        "body": "robson robson robson robson robson robson robson robson",
        "description": "print the top of the stack as number"
    },
    "jump": {
        "prefix": "jump",
        "body": [
            "robson robson robson robson robson robson robson robson robson",
            "lambeu ${1::}"
        ],
        "description": "jumps to param1"
    },
    "set": {
        "prefix": "set",
        "body": [
            "robson robson robson robson robson robson robson robson robson robson",
            "comeu ${1:0}"
        ],
        "description": "set the address of param1 to the param2 value"
    },
    "pop": {
        "prefix": "pop",
        "body": "robson robson robson robson robson robson robson robson robson robson robson",
        "description": "remove top of stack"
    },
    "load": {
        "prefix": "load",
        "body": [
            "robson robson robson robson robson robson robson robson robson robson robson robson",
            "comeu ${1:0}"
        ],
        "description": "load the string from the address of param1"
    },
    "start counting": {
        "prefix": "count",
        "body": [
            "robson robson robson robson robson robson robson robson robson robson robson robson robson",
            "comeu 0"
        ],
        "description": "start counting with the counting internals"
    },
    "set interval": {
        "prefix": "interval",
        "body": [
            "robson robson robson",
            "comeu ${1:0}",
            "comeu ${2:0}",
            "",
            "robson robson robson robson robson robson robson robson robson robson robson robson robson",
            "comeu 1"
        ],
        "description": "set a interval to be compared"
    },
    "compare interval": {
        "prefix": "cmp_interval",
        "body": [
            "robson robson robson robson robson robson robson robson robson robson robson robson robson",
            "comeu 2"
        ],
        "description": "pushes 0 to stack if lower than inteval, 1 if equal and 2 if greater"
    },
    "flush": {
        "prefix": "flush",
        "body": "robson robson robson robson robson robson robson robson robson robson robson robson robson robson",
        "description": "flushes stdout to terminal"
    },
    "enter raw mode": {
        "prefix": "enter",
        "body": [
            "robson robson robson",
            "comeu 1",
            "robson robson robson robson robson robson robson robson robson robson robson robson robson robson robson",
            "comeu 0"
        ],
        "description": "enter the raw mode, leave it before the program ends"
    },
    "leave raw mode": {
        "prefix": "leave",
        "body": [
            "robson robson robson",
            "comeu 0",
            "robson robson robson robson robson robson robson robson robson robson robson robson robson robson robson",
            "comeu 0"
        ],
        "description": "leave the raw mode"
    },
    "clear_purge": {
        "prefix": "clear_purge",
        "body": [
            "robson robson robson",
            "comeu 0",
            "robson robson robson robson robson robson robson robson robson robson robson robson robson robson robson",
            "comeu 1"
        ],
        "description": "clear terminal clear all cells history"
    },
    "clear_all": {
        "prefix": "clear_all",
        "body": [
            "robson robson robson",
            "comeu 0",
            "robson robson robson robson robson robson robson robson robson robson robson robson robson robson robson",
            "comeu 1"
        ],
        "description": "clear all cells"
    },
    "poll input": {
        "prefix": "poll",
        "body": [
            "robson robson robson",
            "comeu ${1:0}",
            "comeu ${2:0}",
            "",
            "robson robson robson robson robson robson robson robson robson robson robson robson robson robson robson",
            "comeu 2"
        ],
        "description": "wait for the given time an input and push it to stack"
    },
    "toggle cursor": {
        "prefix": "togg_cursor",
        "body": [
            "robson robson robson",
            "comeu ${1:0}",
            "",
            "robson robson robson robson robson robson robson robson robson robson robson robson robson robson robson",
            "comeu 3"
        ],
        "description": "show and hide the cursor based on the stack top\n    if its 0 hide cursor otherwise shows it"
    },
    "move cursor": {
        "prefix": "mv_cursor",
        "body": [
            "robson robson robson",
            "comeu ${1:0}",
            "comeu ${2:0}",
            "",
            "robson robson robson robson robson robson robson robson robson robson robson robson robson robson robson",
            "comeu 4"
        ],
        "description": "move the cursor to the x y, on the stack top"
    },
    "color": {
        "prefix": "color",
        "body": [
            "robson robson robson",
            "comeu 5",
            "",
            "robson robson robson robson robson robson robson robson robson robson robson robson robson robson robson",
            "comeu 5"
        ],
        "description": "move the cursor to the x y, on the stack top"
    }
}